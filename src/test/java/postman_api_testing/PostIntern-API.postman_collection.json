{
	"info": {
		"_postman_id": "a0d6dca8-2f08-44b1-b726-e0f5d59dc584",
		"name": "PostIntern-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30595951",
		"_collection_link": "https://orange-sunset-24477.postman.co/workspace/Team-Workspace~2ced4943-f079-4084-865e-4a2ccecac8bd/collection/30595951-a0d6dca8-2f08-44b1-b726-e0f5d59dc584?action=share&source=collection_link&creator=30595951"
	},
	"item": [
		{
			"name": "Login Positive & Negative",
			"item": [
				{
					"name": "Negative Test Cases",
					"item": [
						{
							"name": "ValidUsernameInvalidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"technostudy456\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidUsernameValidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TurkeyTs\",\r\n    \"password\": \"Technostudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidUsernameInvalidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TurkeyTs\",\r\n    \"password\": \"technostudy456\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "EmptyUsernameIValidPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"TechnoStudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidUsernameIEmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "EmptyUsernameIEmptyPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.type).to.exist;\r",
											"  pm.expect(responseData.title).to.exist;\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.status).to.be.a('number');\r",
											"  pm.expect(responseData.status).to.be.at.least(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Positive Test Cases",
					"item": [
						{
							"name": "ValidUsernameValidPasword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"An access token is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('access_token')\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Access token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token type is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.token_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Refresh token is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Expires in is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.expires_in).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"turkeyts\",\r\n    \"password\": \"TechnoStudy123\",\r\n    \"rememberMe\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/auth/login",
									"host": [
										"{{URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Setup",
			"item": [
				{
					"name": "Parameters",
					"item": [
						{
							"name": "States",
							"item": [
								{
									"name": "US101-List State",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"country\");",
													"});",
													"",
													"pm.test(\"Student group list has been successfully created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"countryId\": \"5baac28d91cefe05fc6e3fe6\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/school-service/api/states/search",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Add State",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"var incomingData = pm.response.json();",
													"pm.collectionVariables.set(\"statesID\", incomingData.id);",
													"",
													"",
													"pm.test(\"New states has been added successfully\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"name\": \"{{$randomCity}} - {{$randomAbbreviation}}\",\n  \"shortName\": \"{{$randomAbbreviation}}\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/school-service/api/states",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Add State Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"The State with Name 'Istanbul' already exists.\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"name\": \"Istanbul\",\n  \"shortName\": \"IST\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/school-service/api/states",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Search State",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Istanbul\",\n  \"countryId\": \"63a41a0dcb75ee5c2199a8bc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/school-service/api/states/search",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Edit State",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"States has been edited successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{statesID}}\",\n  \"name\": \"{{$randomCity}} - {{$randomAbbreviation}}\",\n  \"shortName\": \"{{$randomAbbreviation}}\",\n  \"country\": {\n    \"id\": \"63a41a0dcb75ee5c2199a8bc\"\n  },\n  \"translateName\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/school-service/api/states",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Delete State",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/school-service/api/states/{{statesID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states",
												"{{statesID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US101-Delete State Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/school-service/api/states/{{statesID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"school-service",
												"api",
												"states",
												"{{statesID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Country",
							"item": [
								{
									"name": "US002-Create Country",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var gelenData=pm.response.json();\r",
													"pm.collectionVariables.set(\"countryName\",gelenData.name);\r",
													"pm.collectionVariables.set(\"countryID\",gelenData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomCountry}} - {{$randomInt}}\",\r\n  \"code\": \"{{$randomCountryCode}}\",\r\n  \"translateName\": [],\r\n  \"hasState\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/countries",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"countries"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Nationalities",
							"item": [
								{
									"name": "US102-Get List Nationalities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationalities has been listed\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 1000 milliseconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality/search",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "US102-Create a Nationality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationality has been created\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200 milliseconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"nationalityID\", incomingData.id);\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"nationalityName\", incomingData.name);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{$randomCountry}} {{$randomCountryCode}}\",\r\n  \"translateName\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality"
											]
										}
									},
									"response": []
								},
								{
									"name": "US102-Create a Nationality Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationality already exists statusCode 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200 milliseconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body contains string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{nationalityName}}\",\r\n  \"translateName\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality"
											]
										}
									},
									"response": []
								},
								{
									"name": "US102-Edit the Nationality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationality has been updated statusCode 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200 milliseconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{nationalityID}}\",\r\n    \"name\": \"{{$randomCountryCode}} {{$randomCountry}}\",\r\n    \"translateName\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Nationality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationality has been deleted statusCode 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality/{{nationalityID}}",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality",
												"{{nationalityID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Nationality Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Nationality is not found statusCode 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"not  found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://test.mersys.io/school-service/api/nationality/{{nationalityID}}",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"nationality",
												"{{nationalityID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Entrance Exams",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Entrance Exams",
							"item": [
								{
									"name": "US103-Create Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ExamID\",incomingData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomLastName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/exams",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"exams"
											]
										}
									},
									"response": []
								},
								{
									"name": "US103-Edit Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{ExamID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/exams",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"exams"
											]
										}
									},
									"response": []
								},
								{
									"name": "US103-Delet Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/exams/{{ExamID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"exams",
												"{{ExamID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US103-Blank Exam Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/exams",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"exams"
											]
										}
									},
									"response": []
								},
								{
									"name": "US103-Negatif Edit Exam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{ExamID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"translateName\": [],\r\n  \"school\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"gradeLevel\": {\r\n    \"id\": \"654898fae70d9e34a8331e51\"\r\n  },\r\n  \"academicPeriod\": \"6509eba5f640da7207ab120c\",\r\n  \"active\": true,\r\n  \"description\": \"\",\r\n  \"note\": \"\",\r\n  \"agreementText\": \"\",\r\n  \"sendSMS\": false,\r\n  \"sms\": \"\",\r\n  \"sendEmailEnabled\": false,\r\n  \"emailMessage\": {\r\n    \"subject\": \"\",\r\n    \"content\": \"\"\r\n  },\r\n  \"registrationStartDate\": null,\r\n  \"registrationEndDate\": null,\r\n  \"paid\": false,\r\n  \"sendEmailToRegistrar\": false,\r\n  \"registrarEmails\": [],\r\n  \"showDescFirst\": false,\r\n  \"showNoteFirst\": false,\r\n  \"noteEnabled\": false,\r\n  \"descEnabled\": false,\r\n  \"agreementEnabled\": false,\r\n  \"documents\": [],\r\n  \"bankAccount\": null,\r\n  \"price\": 0,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/exams",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"exams"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Custom Field Group",
							"item": [
								{
									"name": "US104-Create Custom Field Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"CustomID\",incomingData.id);\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomCity}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"6576fd8f8af7ce488ac69b89\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "US104-Create Custom Field Group Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bu Order de Group Mevcut\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomCity}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"6576fd8f8af7ce488ac69b89\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "US104-Custom Field Group Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{CustomID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 10,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"6576fd8f8af7ce488ac69b89\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "US104-Custom Field Group Edit Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bu Order de Group Mevcut\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{CustomID}}\",\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"orderNo\": 1,\r\n  \"columnSize\": 1,\r\n  \"translateName\": [],\r\n  \"schoolId\": \"6576fd8f8af7ce488ac69b89\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "US104-Delete Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Basarli silindi\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups/{{CustomID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups",
												"{{CustomID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US104-Delete Group Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Silmek istedininz Group mevcut degil\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/school-service/api/custom-field-groups/{{CustomID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"custom-field-groups",
												"{{CustomID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "Student Groups US105",
					"item": [
						{
							"name": "US105-List Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"States list has been successfully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"description\": null,\n  \"publicGroup\": null,\n  \"showToStudent\": null,\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/search",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "US105-Add a New Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var studentGroupId = responseBody.id;\r",
											"var studentGroupName = responseBody.name;\r",
											"\r",
											"pm.collectionVariables.set(\"studentGroupId\",studentGroupId);\r",
											"pm.collectionVariables.set(\"studentGroupName\",studentGroupName);\r",
											"\r",
											"pm.test('Status code is 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().id).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An schoolId variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().schoolId).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().name).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An description variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().description).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An count variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().count).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().active).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An publicGroup variable is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().publicGroup).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id showToStudent is exist and boolean\", function () {\r",
											"    pm.expect(pm.response.json().showToStudent).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"The name variable has less than 1000 character\", function () {\r",
											"    pm.expect(pm.response.json().name.length).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"The description variable has less than 5000 character\", function () {\r",
											"    pm.expect(pm.response.json().description.length).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomJobArea}} - {{$randomAbbreviation}}\",\r\n    \"description\": \"{{$randomJobDescriptor}}\",\r\n    \"publicGroup\": \"{{$randomBoolean}}\",\r\n    \"showToStudent\": \"{{$randomBoolean}}\",\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "US105-Add a New Student Group Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"A type variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().type).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A status variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().status).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"A detail variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().detail).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A path variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().path).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An code variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('code');\r",
											"});\r",
											"\r",
											"pm.test(\"An message variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().message).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An lang variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('lang');\r",
											"});\r",
											"\r",
											"pm.test(\"An uri variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('uri');\r",
											"});\r",
											"\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{studentGroupName}}\",\r\n    \"description\": \"{{$randomJobDescriptor}}\",\r\n    \"publicGroup\": \"{{$randomBoolean}}\",\r\n    \"showToStudent\": \"{{$randomBoolean}}\",\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "US105-Edit Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().id).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().schoolId).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().name).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().description).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().count).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().active).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().publicGroup).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().showToStudent).is.exist.and.to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"Name variable has less than 1000 character\", function () {\r",
											"    pm.expect(pm.response.json().name.length).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Description variable has less than 5000 character\", function () {\r",
											"    pm.expect(pm.response.json().description.length).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{studentGroupId}}\",\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"name\": \"{{$randomJobType}} - {{$randomAbbreviation}}\",\r\n  \"description\": \"{{$randomJobDescriptor}}\",\r\n  \"active\": \"{{$randomBoolean}}\",\r\n  \"publicGroup\": \"{{$randomBoolean}}\",\r\n  \"showToStudent\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "US105-Delete Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/{{studentGroupId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"{{studentGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "US105-Delete Student Group Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"A type variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().type).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A status variable is exist and number\", function () {\r",
											"    pm.expect(pm.response.json().status).is.exist.and.to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"A detail variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().detail).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"A path variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().path).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An code variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('code');\r",
											"});\r",
											"\r",
											"pm.test(\"An message variable is exist and string\", function () {\r",
											"    pm.expect(pm.response.json().message).is.exist.and.to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"An lang variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('lang');\r",
											"});\r",
											"\r",
											"pm.test(\"An uri variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('uri');\r",
											"});\r",
											"\r",
											"\r",
											"/*\r",
											"var responseData = pm.response.json();\r",
											"pm.test('Verify all properties for each item', function () {\r",
											"    _.each(responseData, function(item) {\r",
											"        pm.expect(item).to.have.property('id').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('description').that.is.a('string').and.not.empty;\r",
											"        pm.expect(item).to.have.property('count').that.is.a('number').and.not.empty;\r",
											"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('publicGroup').that.is.a('boolean');\r",
											"        pm.expect(item).to.have.property('showToStudent').that.is.a('boolean');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"An id variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A schoolId variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('schoolId');\r",
											"});\r",
											"\r",
											"pm.test(\"A name variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"});\r",
											"\r",
											"pm.test(\"A description variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"A count variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('count');\r",
											"});\r",
											"\r",
											"pm.test(\"An active variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('active');\r",
											"});\r",
											"\r",
											"pm.test(\"A publicGroup variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('publicGroup');\r",
											"});\r",
											"\r",
											"pm.test(\"A showToStudent variable is returned\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property('showToStudent');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/{{studentGroupId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"{{studentGroupId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Student Groups US106",
					"item": [
						{
							"name": "US106-List Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"States list has been successfully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"description\": null,\n  \"publicGroup\": null,\n  \"showToStudent\": null,\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/search",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "US106-Create Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var incomingData = pm.response.json();",
											"pm.collectionVariables.set(\"groupID\", incomingData.id);",
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomJobArea}} - {{$randomAbbreviation}}\",\n    \"description\": \"{{$randomJobDescriptor}}\",\n    \"publicGroup\": \"{{$randomBoolean}}\",\n    \"showToStudent\": \"{{$randomBoolean}}\",\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "US106-Select Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"academicPeriodId\": \"6577022e8af7ce488ac69b96\",\r\n    \"classId\": \"65770d9b8af7ce488ac69bb6\",\r\n    \"classStudentIds\": [\r\n        \"657711ca8af7ce488ac6a62d\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/classes/students/pageable?page=0&size=10",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"classes",
										"students",
										"pageable"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "US106-Add Student to Student Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"",
											"pm.test(\"New states has been added successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"646dfdfaab1d8d3d700f1035\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/school-service/api/student-group/{{groupID}}/add-students?page=0&size=10",
									"host": [
										"{{URL}}"
									],
									"path": [
										"school-service",
										"api",
										"student-group",
										"{{groupID}}",
										"add-students"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Education Standard",
							"item": [
								{
									"name": "US108-Get All Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Listilendi\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/education-standard/school/{{schoolID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"education-standard",
												"school",
												"{{schoolID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US108-Add Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Basarli\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"EducationID\",incomingData.id);\r",
													"pm.collectionVariables.set(\"schoolID\",incomingData.schoolId)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{$randomBankAccountName}}\",\r\n  \"description\": null,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/education-standard",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"education-standard"
											]
										}
									},
									"response": []
								},
								{
									"name": "US108-Edit Education Standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Education Standard successfully updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{EducationID}}\",\r\n  \"name\": \"{{$randomCity}}\",\r\n  \"description\": null,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/school-service/api/education-standard",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"education-standard"
											]
										}
									},
									"response": []
								},
								{
									"name": "US108-Delete Education",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Education Standards successfully deleted\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/school-service/api/education-standard/{{EducationID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"education-standard",
												"{{EducationID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US108-Delete Education Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"No such thing\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/school-service/api/education-standard/{{EducationID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"school-service",
												"api",
												"education-standard",
												"{{EducationID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Grading Schema",
							"item": [
								{
									"name": "US109-Grading Scheme- Get List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test('Verify all properties for each item', function () {\r",
													"    _.each(responseData, function(item) {\r",
													"        pm.expect(item).to.have.property('id');\r",
													"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
													"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('gradeRanges').that.is.an('array');\r",
													"        pm.expect(item).to.have.property('type').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('enablePoint').that.is.a('boolean');\r",
													"    });\r",
													"});\r",
													"pm.test(\"Grading Schemes listed\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/grading-schemes/school/{{schoolID}}/search",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"grading-schemes",
												"school",
												"{{schoolID}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "US109-Create One Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"schemeID\", incomingData.id);\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"schemeName\", incomingData.name);\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include('name');\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected properties\", function () {\r",
													"    // Response body JSON formatında olduğundan emin olun\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Response body içerisinde beklenen özelliklerin olup olmadığını kontrol etme\r",
													"    pm.expect(responseBody).to.have.property('id');\r",
													"    pm.expect(responseBody).to.have.property('schoolId');\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Grading Sheme has been successfully created\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{$randomAlphaNumeric}} {{$randomColor}} {{$randomWord}}\",\r\n  \"active\": true,\r\n  \"type\": \"POINT\",\r\n  \"enablePoint\": true,\r\n  \"schoolId\": \"{{schoolID}}\",\r\n  \"gradeRanges\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/grading-schemes",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"grading-schemes"
											]
										}
									},
									"response": []
								},
								{
									"name": "US109-Edit Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Grading Scheme has been successfully updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{schemeID}}\",\r\n    \"name\": \"Edit {{schemeName}}\",\r\n    \"active\": true,\r\n    \"schoolId\": \"{{schoolID}}\",\r\n    \"gradeRanges\": [],\r\n    \"type\": \"POINT\",\r\n    \"enablePoint\": true\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://test.mersys.io/school-service/api/grading-schemes",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"grading-schemes"
											]
										}
									},
									"response": []
								},
								{
									"name": "US109-Delete Grading Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-School",
												"value": "646cbb07acf2ee0d37c6d984",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://test.mersys.io/school-service/api/grading-schemes/{{schemeID}}",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"grading-schemes",
												"{{schemeID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US109-Delete Grading Scheme Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-School",
												"value": "646cbb07acf2ee0d37c6d984",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://test.mersys.io/school-service/api/grading-schemes/{{schemeID}}",
											"protocol": "https",
											"host": [
												"test",
												"mersys",
												"io"
											],
											"path": [
												"school-service",
												"api",
												"grading-schemes",
												"{{schemeID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Incidents",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Incident Type",
							"item": [
								{
									"name": "US110-Get Incident Type List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test('Her bir öğe için tüm özellikleri doğrula', function () {\r",
													"    _.each(responseData, function(item) {\r",
													"        pm.expect(item).to.have.property('id');\r",
													"        pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('translateName').that.is.an('array');\r",
													"        pm.expect(item).to.have.property('active').that.is.a('boolean');\r",
													"        pm.expect(item).to.have.property('schoolId').that.is.a('string').and.not.empty;\r",
													"        pm.expect(item).to.have.property('minPoint').that.is.a('number').and.not.to.be.NaN;\r",
													"        pm.expect(item).to.have.property('maxPoint').that.is.a('number').and.not.to.be.NaN;\r",
													"        pm.expect(item).to.have.property('academicBased').that.is.a('boolean');\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{incidentURL}}/search",
											"host": [
												"{{incidentURL}}"
											],
											"path": [
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "US110-Create a Incident Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"incidentID\", incomingData.id);\r",
													"var incomingData = pm.response.json();\r",
													"pm.collectionVariables.set(\"incidentName\", incomingData.name);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"Yaralama {{$randomCountryCode}}\",\r\n  \"active\": true,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"translateName\": [],\r\n  \"minPoint\": 20,\r\n  \"maxPoint\": 70,\r\n  \"academicBased\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{incidentURL}}",
											"host": [
												"{{incidentURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US110-Create a Incident Type Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"name\": \"{{incidentName}}\",\r\n  \"active\": true,\r\n  \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n  \"translateName\": [],\r\n  \"minPoint\": 20,\r\n  \"maxPoint\": 70,\r\n  \"academicBased\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{incidentURL}}",
											"host": [
												"{{incidentURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US110-Edit Incident Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Response body'deki JSON verisine erişim\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// İstenilen verilere erişim örnekleri\r",
													"var id = responseBody.id;\r",
													"var name = responseBody.name;\r",
													"var minPoint = responseBody.minPoint;\r",
													"var maxPoint = responseBody.maxPoint;\r",
													"\r",
													"// Bu verileri konsola yazdırma\r",
													"console.log('ID:', id);\r",
													"console.log('Name:', name);\r",
													"console.log('Min Point:', minPoint);\r",
													"console.log('Max Point:', maxPoint);\r",
													"\r",
													"// Bu verileri Postman ortamına kaydetme\r",
													"pm.environment.set('idValue', id);\r",
													"pm.environment.set('nameValue', name);\r",
													"pm.environment.set('minPointValue', minPoint);\r",
													"pm.environment.set('maxPointValue', maxPoint);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{incidentID}}\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"active\": true,\r\n    \"schoolId\": \"646cbb07acf2ee0d37c6d984\",\r\n    \"translateName\": [],\r\n    \"minPoint\": 20,\r\n    \"maxPoint\": 70,\r\n    \"academicBased\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{incidentURL}}",
											"host": [
												"{{incidentURL}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US110-Remove Incident Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incident Type has been deleted\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-School",
												"value": "646cbb07acf2ee0d37c6d984",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{incidentURL}}/{{incidentID}}",
											"host": [
												"{{incidentURL}}"
											],
											"path": [
												"{{incidentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "US110-Remove Incident Type Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incident Type not found\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body contains string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-School",
												"value": "646cbb07acf2ee0d37c6d984",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{incidentURL}}/{{incidentID}}",
											"host": [
												"{{incidentURL}}"
											],
											"path": [
												"{{incidentID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GradingSchemeID",
			"value": ""
		},
		{
			"key": "schoolID",
			"value": "",
			"type": "string"
		},
		{
			"key": "URL",
			"value": "https://test.mersys.io",
			"type": "string"
		},
		{
			"key": "studentGroupId",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentSchoolId",
			"value": "646cbb07acf2ee0d37c6d984",
			"type": "string"
		},
		{
			"key": "studentGroupName",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": " https://test.mersys.io",
			"type": "string"
		},
		{
			"key": "ExamID",
			"value": ""
		},
		{
			"key": "groupID",
			"value": ""
		},
		{
			"key": "statesID",
			"value": ""
		},
		{
			"key": "schemeName",
			"value": "",
			"type": "string"
		},
		{
			"key": "schemeID",
			"value": "",
			"type": "string"
		},
		{
			"key": "countryName",
			"value": ""
		},
		{
			"key": "countryID",
			"value": ""
		},
		{
			"key": "incidentID",
			"value": "",
			"type": "string"
		},
		{
			"key": "incidentName",
			"value": "",
			"type": "string"
		},
		{
			"key": "incidentURL",
			"value": "https://test.mersys.io/school-service/api/incident-type",
			"type": "string"
		},
		{
			"key": "CustomID",
			"value": ""
		},
		{
			"key": "EducationID",
			"value": ""
		},
		{
			"key": "nationalityName",
			"value": "",
			"type": "string"
		},
		{
			"key": "nationalityID",
			"value": "",
			"type": "string"
		}
	]
}